[tool.poetry]
name        = "feature-matching"
version     = "1.0.0"
description = ""
authors     = ["Gavin1121 <gavin.meyer@mavs.uta.edu>"]
readme      = "README.md"
packages    = [{ include = "feature_matching" }]

[tool.poetry.dependencies]
python        = "^3.12"
numpy         = "^1.26.3"
opencv-python = "^4.9.0.80"
matplotlib    = "^3.8.2"
scipy         = "^1.12.0"
scikit-image  = "^0.22.0"
scikit-learn  = "^1.4.1.post1"
pandas        = "^2.2.0"
tqdm          = "^4.66.2"

[tool.poetry.group.dev.dependencies]
black            = "^23.12.1"
ruff             = "^0.2.1"
flake8           = "^7.0.0"
mypy             = "^1.8.0"
flake8-pyproject = "^1.2.3"
ipykernel        = "^6.29.2"

[build-system]
requires      = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
feature_extraction = "feature_matching.keypoint_detectors.feature_extraction:main"
load_and_split     = "feature_matching.keypoint_detectors.load_and_split:main"
evaluate_sift      = "feature_matching.keypoint_detectors.evaluate_sift:main"
stitch_images      = "feature_matching.image_stitching.stitch_images:main"

[tool.black]
line-length    = 100
target-version = ["py312"]

[tool.ruff]
fix            = true
target-version = "py312"
line-length    = 100
preview        = true
cache-dir      = ".cache/.ruff_cache"

lint.select = ["ALL"]

lint.ignore = [
    "ANN101",  # Missing type annotation for self in method
    "ANN101",  # Missing type annotation for cls in classmethod
    "COM812",  # Missing trailing comma in a tuple
    "D407",    # Dashed underline after section
    "D415",    # ends-in-punctuation
    "G004",    # Logging f string
    "N812",    # Lowercase imported as non lowercase
    "TRY003",  # Bare except
    "CPY001",  # Copyright
    "T201",    # print statement
    "PLR2004", # numbers in code
    "N806",    # Variable in function should be lowercase
    "N803",    # Argument name should be lowercase
]

lint.extend-ignore = [
    "AIR",  # AirBnB style guide
    "DJ",   # Django style guide
    "EM",   # flake8-error-message
    "FBT",  # flake8-boolean-truth
    "NPY",  # NumPy style guide
    "PD",   # pandas style guide
    "SLOT", # flake8-slot
]

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true

[tool.ruff.lint.flake8-quotes]
avoid-escape = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
combine-as-imports  = true
lines-after-imports = 2
lines-between-types = 1
known-first-party   = ["feature-matching"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length                = 150

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 11

[tool.flake8]
max-line-length = 100
max-doc-length = 150
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "docs",
    "assignment",
    "venv",
    ".bzr",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".svn",
    ".ruff_cache",
    ".pytype",
]

[tool.mypy]
python_version    = "3.12"
files             = "feature-matching"
show_error_codes  = true
strict            = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
cache_dir         = ".cache/.mypy_cache"
